#!/usr/bin/env python
# -*- coding: utf-8 -*-
# File              : ampel/pipeline/config/Channel.py
# License           : BSD-3-Clause
# Author            : vb <vbrinnel@physik.hu-berlin.de>
# Date              : 01.03.2018
# Last Modified Date: 04.03.2018
# Last Modified By  : vb <vbrinnel@physik.hu-berlin.de>

from ampel.flags.FlagGenerator import FlagGenerator
from ampel.flags.LogRecordFlags import LogRecordFlags
from ampel.pipeline.logging.LoggingUtils import LoggingUtils
import importlib


class Channel:
	"""
	"""

	@classmethod
	def set_T2UnitIds(cls, T2UnitIds):
		"""
		Sets static variable referencing the enum flag *class* (not instance)
		listing all known T2 ids in the database (generated at runtime by FlagGenerator)
		"""
		Channel.T2UnitIds = T2UnitIds


	@classmethod
	def set_ChannelFlags(cls, ChannelFlags):
		"""
		Sets static variable referencing the enum flag *class* (not instance)
		listing all known channels in the database (generated at runtime by FlagGenerator)
		"""
		Channel.ChannelFlags = ChannelFlags


	def __init__(
		self, channel_collection, channel_name=None, db_doc=None, 
		t0_ready=False, gen_flags=True, logger=None
	):
		"""
		"""
		self.logger = LoggingUtils.get_logger() if logger is None else logger

		if channel_name is None and db_doc is None:
			raise ValueError("Please set either 'channel_name' or 'db_doc'")

		if channel_name is None:
			self.load_from_doc(db_doc)
			self.name = db_doc['_id']
		else:
			self.load_from_db(channel_collection, channel_name)
			self.name = channel_name

		if gen_flags is True:
			self.gen_flag(channel_collection)

		if t0_ready is True:
			self.ready_t0()


	def gen_flag(self, channel_collection):		
		"""
		"""
		self.flag = Channel.ChannelFlags[self.name]
		self.t2_flags = None

		for el in self.t2_config:
			try:
				if self.t2_flags is None:
					self.t2_flags = Channel.T2UnitIds[el['t2Unit']]
				else:
					self.t2_flags |= Channel.T2UnitIds[el['t2Unit']]
			except KeyError:
				raise ValueError(
					("The AMPEL T2 unit '%s' referenced by the channel '%s' does not exist.\n" +
					"Please either correct the problematic entry in section 't2Compute' of channel '%s'\n" +
					"or make sure the T2 unit '%s' exists in the mongodb collection 't2_units'.") % 
					(el['t2Unit'], self.name, self.name, el['t2Unit'])
				)


	def load_from_doc(self, db_doc):		
		"""
		db_doc: dict instance containing channel configrations
		"""
		self.input = db_doc['input']
		self.filter_config = db_doc['t0Filter']
		self.t2_config = db_doc['t2Compute']



	def load_from_db(self, mongo_collection, channel_name):
		"""
		mongo_collection: instance of a mongodb collection
		channel_name: value of field '_id' in channel db document.
		FYI:
		  default db: 'Ampel_config'
		  default collection: 'channels'
		"""
		cursor = mongo_collection.find(
			{'_id': channel_name}
		)

		if cursor.count() == 0:
			raise NameError("Channel '%s' not found" % channel_name)

		self.load_from_doc(
			cursor.next()
		)


	#def get_channel_input_parameters(self, instrument="ZTF", alerts="IPAC"):
	def get_input_parameters(self, instrument="ZTF", alerts="IPAC"):
		"""	
		Dict path lookup shortcut function
		"""	
		for el in self.input:
			if el['instrument'] == instrument and el['alerts'] == alerts:
				return el['parameters']

		return None
		

	#def get_channel_flag_instance(self, channel_name):
	def get_flag(self):
		"""	
		Return ChannelFlags instance.
		-> The class ChannelFlags is generated by ampel.flags.FlagGenerator
		-> The instance of ChannelFlags is generated using ChannelFlags[<channel name>]
		"""	
		return self.flag


	#def get_channel_t2s_flag(self, channel_name):
	def get_t2_flags(self):
		"""	
		Returns T2UnitIds instance.
		-> The class T2UnitIds is generated by ampel.flags.FlagGenerator
		"""	
		return self.t2_flags


	#def get_channel_filter_config(self, channel_name):
	def get_filter_config(self):
		"""	
		"""	
		return self.filter_config


	#def set_channel_filter_parameter(self, channel_name, param_name, param_value):
	def set_filter_parameter(self, param_name, param_value):
		"""	
		Manualy set/add/edit filter parameters
		"""	
		self.filter_config['parameters'][param_name] = param_value


	#def get_channel_t2_param(self, channel_name, t2_runnable_name):
	def get_t2_settings(self, t2_unit_name):
		"""	
		Dict path shortcut function
		"""	
		for el in self.t2_config:
			if el['t2Unit'] == t2_unit_name:
				return el['runSettings']

		return None 


	def ready_t0(self):

		# Instanciate filter class associated with this channel
		self.logger.info("Loading filter: " + self.filter_config['classFullPath'])
		module = importlib.import_module(self.filter_config['classFullPath'])
		fobj = getattr(module, self.filter_config['classFullPath'].split(".")[-1])()
		fobj.set_logger(self.logger)
		fobj.set_filter_parameters(self.filter_config['parameters'])

		# Set filter instance on match enum flag 
		self.logger.info("On match flags: %s" % self.t2_flags)
		fobj.set_on_match_default_flags(self.t2_flags)

		# Reference to the "apply()" function of the T0 filter (used in run())
		self.filter_func = fobj.apply

		# LogRecordFlag and TransienFlag associated with the current channel
		self.log_flag = LogRecordFlags[self.name]

		# Build these two log entries once and for all (outside the main loop in run())
		self.log_accepted = " -> Channel '%s': alert passes filter criteria" % self.name
		self.log_rejected = " -> Channel '%s': alert was rejected" % self.name

