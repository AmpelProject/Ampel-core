[tool.poetry]
name = "ampel-core"
version = "0.8.8a3"
description = "Alice in Modular Provenance-Enabled Land"
authors = ["Valery Brinnel"]
maintainers = ["Jakob van Santen <jakob.van.santen@desy.de>"]
license = "BSD-3-Clause"
readme = "README.md"
homepage = "https://ampelproject.github.io"
repository = "https://github.com/AmpelProject/Ampel-core"
documentation = "https://ampelproject.github.io/Ampel-core"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Typing :: Typed",
]
packages = [{include = "ampel"}]
include = [
    'conf/*/*.json',
    'conf/*/*/*.json',
    'conf/*/*.yaml',
    'conf/*/*/*.yaml',
    'conf/*/*.yml',
    'conf/*/*/*.yml',
]

[tool.poetry.scripts]
ampel-controller = 'ampel.core.AmpelController:AmpelController.main'
ampel-db = 'ampel.db.AmpelDB:main'
ampel = 'ampel.cli.main:main'

[tool.poetry.plugins.cli]
'job_Run_schema_file(s)' = 'ampel.cli.JobCommand'
'process_Run_single_task' = 'ampel.cli.ProcessCommand'
'run_Run_selected_process(es)_from_config' = 'ampel.cli.RunCommand'
'log_Select,_format_and_either_view_(tail_mode_available)_or_save_logs' = 'ampel.cli.LogCommand'
'view_Select,_load_and_save_fresh_"ampel_views"' = 'ampel.cli.ViewCommand'
'db_Initialize,_dump,_delete_specific_databases_or_collections' = 'ampel.cli.DBCommand'
'config_Build_or_update_config._Fetch_or_append_config_elements' = 'ampel.cli.ConfigCommand'
#'start_Run_ampel_continuously._Processes_are_scheduled_according_to_config' = 'ampel.cli.StartCommand'
't2_Match_and_either_reset_or_view_raw_t2_documents' = 'ampel.cli.T2Command'
'buffer_Match_and_view_or_save_ampel_buffers' = 'ampel.cli.BufferCommand'
'event_Show_events_information' = 'ampel.cli.EventCommand'

[tool.poetry.dependencies]
ampel-interface = {version = "^0.8.10"}
python = ">=3.10,<3.12"
pymongo = "^4.0"
pydantic = "^1.9.0"
sjcl = "^0.2.1"
schedule = "^1.0.0"
yq = "^3.0.0"
prometheus-client = ">=0.16,<0.17"
xxhash = "^3.0.0"
psutil = "^5.8.0"
appdirs = "^1.4.4"
requests = "^2.0"
fastapi = {version = ">=0.95,<0.96", optional = true}
uvicorn = {version = ">=0.21.1,<0.22.0", optional = true, extras = ["standard"]}
Sphinx = {version = ">=6.1.2,<6.2.0", optional = true}
sphinx-press-theme = {version = ">=0.5.1,<0.9.0", optional = true}
sphinx-autodoc-typehints = {version = "^1.11.1", optional = true}
tomlkit = {version = "^0.11.0", optional = true}
slack-sdk = {version = "^3.18.1", optional = true}

[tool.poetry.dev-dependencies]
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
mypy = "^1.5.1"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.11.1"
mongomock = "^4.1.2"
httpx = "^0.25.0"
types-setuptools = "^65.1.0"
types-PyYAML = "^6.0.12"

[tool.poetry.extras]
server = ["fastapi", "uvicorn"]
docs = ["Sphinx", "sphinx-press-theme", "sphinx-autodoc-typehints", "tomlkit"]
slack = ["slack_sdk"]

[tool.poetry.group.dev.dependencies]
types-requests = "^2.28.11.15"

[tool.isort]
profile = "black"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools>=40.8.0"]
build-backend = "poetry.core.masonry.api"
